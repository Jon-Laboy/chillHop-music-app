[{"C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\App.js":"1","C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\components\\PlayerControls.js":"2","C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\components\\LibrarySong.js":"3","C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\components\\Song.js":"4","C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\components\\Library.js":"5","C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\index.js":"6","C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\components\\Nav.js":"7","C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\data.js":"8"},{"size":2991,"mtime":1607969477564,"results":"9","hashOfConfig":"10"},{"size":3959,"mtime":1607969806812,"results":"11","hashOfConfig":"10"},{"size":644,"mtime":1607969579277,"results":"12","hashOfConfig":"10"},{"size":537,"mtime":1607635701806,"results":"13","hashOfConfig":"10"},{"size":897,"mtime":1607356520280,"results":"14","hashOfConfig":"10"},{"size":201,"mtime":1607354316766,"results":"15","hashOfConfig":"10"},{"size":494,"mtime":1607386754266,"results":"16","hashOfConfig":"10"},{"size":4197,"mtime":1607390115444,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"u1f9w9",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\App.js",["36","37"],"C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\components\\PlayerControls.js",["38"],"import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPlayCircle,\r\n  faAngleLeft,\r\n  faAngleRight,\r\n  faPauseCircle,\r\n  faRandom,\r\n  faUndoAlt\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst PlayerControls = ({\r\n  songs,\r\n  songInfo,\r\n  setSongInfo,\r\n  audioRef,\r\n  currentSong,\r\n  setCurrentSong,\r\n  isPlaying,\r\n  setIsPlaying,\r\n  setShuffleState,\r\n  shuffleState,\r\n  loopState,\r\n  setLoopState\r\n}) => {\r\n  const animationPercentage = (songInfo.currentTime / songInfo.duration) * 100;\r\n\r\n  const handlePlayPause = () => {\r\n    // if playing then onClick set audio to pause onClick. if paused then set to play. setIsPlaying state to the opposite of what it currently is\r\n    isPlaying ? audioRef.current.pause() : audioRef.current.play();\r\n    setIsPlaying(!isPlaying);\r\n  };\r\n\r\n  const formatTime = (time) => {\r\n    return (\r\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n    );\r\n  };\r\n  //drag the range bar to different parts of song\r\n  const dragHandler = (e) => {\r\n    audioRef.current.currentTime = e.target.value;\r\n    setSongInfo({ ...songInfo, currentTime: e.target.value });\r\n  };\r\n\r\n  const skipTrackHandler = async (direction) => {\r\n    const currentIndex = songs.findIndex((song) => song.id === currentSong.id);\r\n    if (direction === \"skip-forward\") {\r\n      //setcurrent song to the index + 1 for next song then use % to go back to index of 0 when reach last index\r\n      await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\r\n    }\r\n    if (direction === \"skip-back\") {\r\n      //once on index of 0 (first song) and - 1 again that will equal -1 if so..then set the current song to the songs with the index of songs.length -1 which gives the highest index in array\r\n      if ((currentIndex - 1) % songs.length === -1) {\r\n        await setCurrentSong(songs[songs.length - 1]);\r\n        return;\r\n      }\r\n      await setCurrentSong(songs[currentIndex - 1]);\r\n    }\r\n    if (isPlaying) audioRef.current.play();\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"player-container\">\r\n      <div className=\"time-control\">\r\n        <p>{formatTime(songInfo.currentTime)}</p>\r\n        <div\r\n          style={{\r\n            background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`,\r\n          }}\r\n          className=\"track\"\r\n        >\r\n          <input\r\n            type=\"range\"\r\n            min={0}\r\n            max={songInfo.duration}\r\n            value={songInfo.currentTime || \"\"}\r\n            onChange={dragHandler}\r\n          />\r\n          <div\r\n            style={{ transform: `translateX(${animationPercentage}%)` }}\r\n            className=\"animate-track\"\r\n          ></div>\r\n        </div>\r\n        <p>{formatTime(songInfo.duration || 0)}</p>\r\n      </div>\r\n      <div className=\"play-control\">\r\n        <FontAwesomeIcon\r\n          onClick={() => skipTrackHandler(\"skip-back\")}\r\n          icon={faAngleLeft}\r\n          size=\"3x\"\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={handlePlayPause}\r\n          className=\"play\"\r\n          icon={isPlaying ? faPauseCircle : faPlayCircle}\r\n          size=\"3x\"\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={() => skipTrackHandler(\"skip-forward\")}\r\n          icon={faAngleRight}\r\n          size=\"3x\"\r\n        />\r\n      </div>\r\n      <div className=\"shuffle-row\">\r\n        <FontAwesomeIcon\r\n          onClick={()=> setShuffleState(!shuffleState)}\r\n          icon={faRandom}\r\n          size=\"2x\"\r\n          style={{margin:\"0rem 3rem 1rem 3rem\", cursor:\"pointer\",color: shuffleState ? \"rgb(218, 92, 92)\" : \"white\"}}\r\n        />\r\n       <FontAwesomeIcon \r\n        onClick={()=> setLoopState(!loopState)}\r\n        icon={faUndoAlt} \r\n        size=\"2x\"\r\n        style={{margin:\"0rem 3rem 1rem 3rem\", cursor:\"pointer\",color: loopState ? \"rgb(218, 92, 92)\" : \"white\"}}        />\r\n       </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayerControls;\r\n","C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\components\\LibrarySong.js",["39"],"import React from 'react';\r\n\r\nconst LibrarySong = ({ isPlaying, audioRef, currentSong, setCurrentSong, song }) => {\r\n\r\n    const handleSongSelect = async () => {\r\n        await setCurrentSong(song)\r\n        if (isPlaying) audioRef.current.play();\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={`library-song  ${song.id === currentSong.id ? 'selected' : ''}`}\r\n            onClick={handleSongSelect}>\r\n            <img src={song.cover} />\r\n            <div className=\"song-description\">\r\n                <h3>{song.name}</h3>\r\n                <h4>{song.artist}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LibrarySong\r\n","C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\components\\Song.js",[],"C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\components\\Library.js",[],"C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\index.js",[],"C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\components\\Nav.js",[],"C:\\Users\\jon_6\\OneDrive\\Desktop\\coding\\react-projects\\music-app\\src\\data.js",[],{"ruleId":"40","severity":1,"message":"41","line":72,"column":7,"nodeType":"42","endLine":72,"endColumn":20},{"ruleId":"40","severity":1,"message":"41","line":75,"column":7,"nodeType":"42","endLine":75,"endColumn":38},{"ruleId":"43","severity":1,"message":"44","line":1,"column":17,"nodeType":"45","messageId":"46","endLine":1,"endColumn":25},{"ruleId":"47","severity":1,"message":"48","line":14,"column":13,"nodeType":"49","endLine":14,"endColumn":37},"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]